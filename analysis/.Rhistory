SNP_mutate <- lapply(nbp, runif)
SNP_mutations <- lapply(SNP_mutate, function(x){x<SNP_mu})
SNPmutate <- function(string){
string2 <- unlist(strsplit(string, split=""))
string3 <- string2
for (i in 1:length(string2)){
if (string2[i]=="A"){string3[i]="T"}
if (string2[i]=="T"){string3[i]="A"}
if (string2[i]=="C"){string3[i]="G"}
if (string2[i]=="G"){string3[i]="C"}
}
return(paste(string3, collapse=""))
}
SNP_mutants <- paste(lapply(as.character(genome[SNP_mutations]), mutate), collapse="")
SNP_mutants
genome[SNP_mutations]<-SNP_mutants
genome
genome[SNP_mutations]
SNP_mutants <- paste(lapply(as.character(genome[SNP_mutations]), mutate), collapse="")
genome[SNP_mutations]
SNP_mutants
genome[SNP_mutations]<-SNP_mutants
genome
genome[SNP_mutations]
chr <- paste(rep("AG", 100), collapse="")
genome<- DNAStringSet(rep(chr,nchr*nind))
names(genome) <- rep(paste("chr", 1:nchr, sep=""), nind)
genome
str(genome)
genome@metadata <- list(ind=rep(1:nind, each=nchr), pop=rep(1,4))
genome@metadata
#genome@metadata$ind
length(genome)
genome
nbp <- width(genome)
SNP_mu <- 1e-01
SNP_mutate <- lapply(nbp, runif)
SNP_mutations <- lapply(SNP_mutate, function(x){x<SNP_mu})
SNPmutate <- function(string){
string2 <- unlist(strsplit(string, split=""))
string3 <- string2
for (i in 1:length(string2)){
if (string2[i]=="A"){string3[i]="T"}
if (string2[i]=="T"){string3[i]="A"}
if (string2[i]=="C"){string3[i]="G"}
if (string2[i]=="G"){string3[i]="C"}
}
return(paste(string3, collapse=""))
}
SNP_mutants <- paste(lapply(as.character(genome[SNP_mutations]), mutate), collapse="")
genome[SNP_mutations]
SNP_mutants
genome[SNP_mutations]<-SNP_mutants
genome
genome[SNP_mutations]
nbp <- width(genome)
nbp
indel_mu <- 1e-01
indel_mutate <- lapply(nbp, runif)
indel_mutations <- lapply(SNP_mutate, function(x){x<SNP_mu})
genome<- genome[!indel_mutations]
indel_mutations
indel_mutations <- unlist(lapply(SNP_mutate, function(x){x<SNP_mu}))
genome<- genome[!indel_mutations]
genome[indel_mutations]
indel_mutations <- (lapply(SNP_mutate, function(x){x<SNP_mu}))
genome[indel_mutations]
genome <- genome[-indel_mutations]
indel_mutate <- lapply(nbp, runif)
del_mutations <- (lapply(SNP_mutate, function(x){x<SNP_mu/2}))
insertions <- (lapply(SNP_mutate, function(x){x>SNP_mu/2}))
genome[indel_mutations]
indel_mutate <- lapply(nbp, runif)
del_mutations <- (lapply(SNP_mutate, function(x){x<SNP_mu/2}))
insertions <- (lapply(SNP_mutate, function(x){x>SNP_mu/2}))
genome[indel_mutations]
genome[del_mutations]
genome[insertions]
insertions <- (lapply(SNP_mutate, function(x){x>(1-SNP_mu/2)}))
genome[del_mutations]
genome[insertions]
del_mutations
genome[!del_mutations]
del_mutations <- (lapply(SNP_mutate, function(x){!(x<SNP_mu/2)}))
del_mutations
genome[del_mutations]
nbp <- width(genome)
nbp
genome <- genome[del_mutations]
nbp <- width(genome)
nbp
insert_mutations <- (lapply(SNP_mutate, function(x){(x>indel_mu/2)}))
genome[insertions]
insert_mutations
insert_mutations <- (lapply(SNP_mutate, function(x){(x>(1-indel_mu/2))}))
insert_mutations
genome[1]
genome[[1]]
genome[[1]][1]
genome[[1]][14]
genome[[1]][1]
genome[[1]]
genome[[1]][1]<-"AT"
genome[[1]][insert_mutations[1]]
insert_mutations[1]
genome[[1]][insert_mutations[[1]]]
insert_mutations[[1]]
genome[[1]]
which(insert_mutations[[1]])
?indel
insert_mutations
genome[[1]]
sum(insert_mutations)
insert_mutations
sum(unlist(insert_mutations))
sample(c("A", "C","G", "T"), sum(unlist(insert_mutations)))
insert_mutants <- sample(c("A", "C","G", "T"), sum(unlist(insert_mutations)), replace=TRUE)
insert_mutants
genome[[1]]
which(insert_mutations[[1]])
insert_mutants <- sample(c("A", "C","G", "T"), sum(insert_mutations[[1]]), replace=TRUE)
insert_mutants
which(insert_mutations[[1]])
split_str_by_index <- function(target, index) {
index <- sort(index)
substr(rep(target, length(index) + 1),
start = c(1, index),
stop = c(index -1, nchar(target)))
}
#Taken from https://stat.ethz.ch/pipermail/r-help/2006-March/101023.html
interleave <- function(v1,v2)
{
ord1 <- 2*(1:length(v1))-1
ord2 <- 2*(1:length(v2))
c(v1,v2)[order(c(ord1,ord2))]
}
insert_str <- function(target, insert, index) {
insert <- insert[order(index)]
index <- sort(index)
paste(interleave(split_str_by_index(target, index), insert), collapse="")
}
i=1
insert_str(genome[[1]], insert_mutants[i], insert_mutant_where[i])
insert_mutant_where <- which(insert_mutations[[1]])
insert_mutants <- sample(c("A", "C","G", "T"), sum(insert_mutations[[1]]), replace=TRUE)
insert_mutants
insert_mutant_where
genome[[1]][23:30]
insert_str(genome[[1]], insert_mutants[i], insert_mutant_where[i])
paste(rep(1000,20), collapse=",")
names(params)
paste(rep(10,20), collapse=",")
paste(rep(100000,20), collapse=",")
paste(rep("100000",20), collapse=",")
paste(rep("100",20), collapse=",")
paste(rep("10",20), collapse=",")
source("https://bioconductor.org/biocLite.R")
biocLite("RSVSim")
nchr <- 2
nind <- 2
chr <- paste(rep("0", 100), collapse="")
chr
names(genome) <- rep(paste("chr", 1:nchr, sep=""), nind)
genome<- DNAStringSet(rep(chr,nchr*nind))
biocLite("RSVSim")
library(RSVSim)
genome<- DNAStringSet(rep(chr,nchr*nind))
chr <- paste(rep("N", 100), collapse="")
genome<- DNAStringSet(rep(chr,nchr*nind))
genome
names(genome) <- rep(paste("chr", 1:nchr, sep=""), nind)
genome
str(genome)
genome@metadata <- list(ind=rep(1:nind, each=nchr), pop=rep(1,4))
genome@metadata
length(genome)
genome
nbp <- width(genome)
nbp
SNP_mu <- 1e-01
nbp*SNP_mu
rbinom(10,size = 100, prob=SNP_mu)
rbinom(100,size = 10, prob=SNP_mu)
rbinom(100,size = 1, prob=SNP_mu)
rbinom(100,size = 1, prob=SNP_mu)
SNP_mutations <- lapply(SNP_mutate, function(x){x<SNP_mu})
SNPmutate <- function(string){
string2 <- unlist(strsplit(string, split=""))
string3 <- string2
for (i in 1:length(string2)){
if (string2[i]=="A"){string3[i]="T"}
if (string2[i]=="T"){string3[i]="A"}
if (string2[i]=="C"){string3[i]="G"}
if (string2[i]=="G"){string3[i]="C"}
}
return(paste(string3, collapse=""))
}
SNP_mutations <- lapply(SNP_mutate, function(x){x<SNP_mu})
SNP_mutations <- lapply(SNPmutate, function(x){x<SNP_mu})
SNP_mutations
SNP_mutate <- rbinom(100,size = 1, prob=SNP_mu)
setwd("/Users/katie/Desktop/CurrResearch/1-AdaptreeData/201509_PEGA/analysis")
library(tiff)
PE2<-read.table(file = "../data/EnvironmentPhenotypeCorrelations-PineSpruce-spearman_v2.WITHSCORES.txt", header=TRUE)
head(PE2)
PE2$pine_score1_bayenv <- PE2$pine_score1_bayenv*1000
PE2$spruce_score1_bayenv <- PE2$spruce_score1_bayenv*1000
phens <- levels(PE2$Phenotype)
files <- list.files("figure_new","^noaxes")
for (j in seq_along(phens)){
}
j=1
PE_sub <- PE2[PE2$Phenotype==phens[j],]
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
### pine
m <- max(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_min <- min(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_range <- m-m_min
mx <- max(c(abs(PE_sub$pine_correlation),abs(PE_sub$spruce_correlation)))
pdf(paste("figure_PEGA/",PE_pheno_name,".pdf", sep=""), width = 7, height=14,bg="transparent")
par(mfrow=c(2,1), mar=c(3,3,2,1), oma=c(2,2,2,0))
scale <- 10
### PINE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m_range/10,m+m_range/10), type='n', bty="n", main="Pine", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"pine.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$pine_correlation[i])-mx/scale
xright <- abs(PE_sub$pine_correlation[i])+mx/scale
ybottom <- PE_sub$pine_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$pine_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$pine_score1_bayenv~abs(PE_sub$pine_correlation)))
### SPRUCE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m/10,m+m/10), type='n', bty="n", main="Spruce", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"spruce.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$spruce_correlation[i])-mx/scale
xright <- abs(PE_sub$spruce_correlation[i])+mx/scale
ybottom <- PE_sub$spruce_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$spruce_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$spruce_score1_bayenv~abs(PE_sub$spruce_correlation)))
mtext("Phenotype correlation with environment",side = 1, outer=TRUE)
mtext(PE_pheno_name,side = 3, outer=TRUE)
mtext("Genome Score",side = 2, outer=TRUE)
dev.off()
phens <- levels(PE2$Phenotype)
files <- list.files("figure_new","^noaxes")
for (j in seq_along(phens)){
## subset dataframe to get just this Phenotype
PE_sub <- PE2[PE2$Phenotype==phens[j],]
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
### pine
m <- max(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_min <- min(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_range <- m-m_min
mx <- max(c(abs(PE_sub$pine_correlation),abs(PE_sub$spruce_correlation)))
pdf(paste("figure_PEGA/",PE_pheno_name,".pdf", sep=""), width = 7, height=14,bg="transparent")
par(mfrow=c(2,1), mar=c(3,3,2,1), oma=c(2,2,2,0))
scale <- 10
### PINE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m_range/10,m+m_range/10), type='n', bty="n", main="Pine", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"pine.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$pine_correlation[i])-mx/scale
xright <- abs(PE_sub$pine_correlation[i])+mx/scale
ybottom <- PE_sub$pine_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$pine_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$pine_score1_bayenv~abs(PE_sub$pine_correlation)))
### SPRUCE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m/10,m+m/10), type='n', bty="n", main="Spruce", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"spruce.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$spruce_correlation[i])-mx/scale
xright <- abs(PE_sub$spruce_correlation[i])+mx/scale
ybottom <- PE_sub$spruce_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$spruce_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$spruce_score1_bayenv~abs(PE_sub$spruce_correlation)))
mtext("Phenotype correlation with environment",side = 1, outer=TRUE)
mtext(PE_pheno_name,side = 3, outer=TRUE)
mtext("Genome Score",side = 2, outer=TRUE)
dev.off()
}
j
PE_sub <- PE2[PE2$Phenotype==phens[j],]
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
PE_sub
phens[j]
levels(PE2$Phenotype)
PE_sub <- PE2[PE2$Phenotype==phens[j],]
PE_sub
sum(PE2$pine_score1_bayenv)>0
if(!(is.na(sum(PE2$pine_score1_bayenv)))
for (j in seq_along(phens)){
## subset dataframe to get just this Phenotype
PE_sub <- PE2[PE2$Phenotype==phens[j],]
if(!(is.na(sum(PE2$pine_score1_bayenv))){
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
### pine
m <- max(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_min <- min(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_range <- m-m_min
mx <- max(c(abs(PE_sub$pine_correlation),abs(PE_sub$spruce_correlation)))
pdf(paste("figure_PEGA/",PE_pheno_name,".pdf", sep=""), width = 7, height=14,bg="transparent")
par(mfrow=c(2,1), mar=c(3,3,2,1), oma=c(2,2,2,0))
scale <- 10
### PINE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m_range/10,m+m_range/10), type='n', bty="n", main="Pine", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"pine.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$pine_correlation[i])-mx/scale
xright <- abs(PE_sub$pine_correlation[i])+mx/scale
ybottom <- PE_sub$pine_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$pine_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$pine_score1_bayenv~abs(PE_sub$pine_correlation)))
### SPRUCE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m/10,m+m/10), type='n', bty="n", main="Spruce", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"spruce.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$spruce_correlation[i])-mx/scale
xright <- abs(PE_sub$spruce_correlation[i])+mx/scale
ybottom <- PE_sub$spruce_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$spruce_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$spruce_score1_bayenv~abs(PE_sub$spruce_correlation)))
mtext("Phenotype correlation with environment",side = 1, outer=TRUE)
mtext(PE_pheno_name,side = 3, outer=TRUE)
mtext("Genome Score",side = 2, outer=TRUE)
dev.off()
}#end if not NA
}
i
j
phens <- levels(PE2$Phenotype)
files <- list.files("figure_new","^noaxes")
for (j in seq_along(phens)){
## subset dataframe to get just this Phenotype
PE_sub <- PE2[PE2$Phenotype==phens[j],]
if(!(is.na(sum(PE_sub$pine_score1_bayenv))){
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
### pine
m <- max(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_min <- min(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_range <- m-m_min
mx <- max(c(abs(PE_sub$pine_correlation),abs(PE_sub$spruce_correlation)))
pdf(paste("figure_PEGA/",PE_pheno_name,".pdf", sep=""), width = 7, height=14,bg="transparent")
par(mfrow=c(2,1), mar=c(3,3,2,1), oma=c(2,2,2,0))
scale <- 10
### PINE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m_range/10,m+m_range/10), type='n', bty="n", main="Pine", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"pine.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$pine_correlation[i])-mx/scale
xright <- abs(PE_sub$pine_correlation[i])+mx/scale
ybottom <- PE_sub$pine_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$pine_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$pine_score1_bayenv~abs(PE_sub$pine_correlation)))
### SPRUCE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m/10,m+m/10), type='n', bty="n", main="Spruce", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"spruce.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$spruce_correlation[i])-mx/scale
xright <- abs(PE_sub$spruce_correlation[i])+mx/scale
ybottom <- PE_sub$spruce_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$spruce_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$spruce_score1_bayenv~abs(PE_sub$spruce_correlation)))
mtext("Phenotype correlation with environment",side = 1, outer=TRUE)
mtext(PE_pheno_name,side = 3, outer=TRUE)
mtext("Genome Score",side = 2, outer=TRUE)
dev.off()
}#end if not NA
}
for (j in seq_along(phens)){
## subset dataframe to get just this Phenotype
PE_sub <- PE2[PE2$Phenotype==phens[j],]
if(!(is.na(sum(PE_sub$pine_score1_bayenv)))){
PE_pheno_name <- as.character(phens[j])
files_sub <- files[grep(PE_pheno_name,files)]
### pine
m <- max(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_min <- min(c(PE_sub$pine_score1_bayenv,PE_sub$spruce_score1_bayenv))
m_range <- m-m_min
mx <- max(c(abs(PE_sub$pine_correlation),abs(PE_sub$spruce_correlation)))
pdf(paste("figure_PEGA/",PE_pheno_name,".pdf", sep=""), width = 7, height=14,bg="transparent")
par(mfrow=c(2,1), mar=c(3,3,2,1), oma=c(2,2,2,0))
scale <- 10
### PINE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m_range/10,m+m_range/10), type='n', bty="n", main="Pine", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"pine.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$pine_correlation[i])-mx/scale
xright <- abs(PE_sub$pine_correlation[i])+mx/scale
ybottom <- PE_sub$pine_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$pine_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$pine_score1_bayenv~abs(PE_sub$pine_correlation)))
### SPRUCE #####
##############
plot(c(0-mx/10,mx+mx/10),c(m_min-m/10,m+m/10), type='n', bty="n", main="Spruce", las=1)
### Match names
for (i in 1:nrow(PE_sub)){
PE_envi_name <- as.character(PE_sub$Environment[i])
### pine
f <- paste("figure_new/noaxes", PE_pheno_name,"__", PE_envi_name,"spruce.tiff",sep="")
img <- readTIFF(f)
xleft <- abs(PE_sub$spruce_correlation[i])-mx/scale
xright <- abs(PE_sub$spruce_correlation[i])+mx/scale
ybottom <- PE_sub$spruce_score1_bayenv[i]-m_range/scale
ytop <- PE_sub$spruce_score1_bayenv[i]+m_range/scale
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
rasterImage(img, xleft, ybottom, xright, ytop, interpolate=TRUE)
}
abline(lm(PE_sub$spruce_score1_bayenv~abs(PE_sub$spruce_correlation)))
mtext("Phenotype correlation with environment",side = 1, outer=TRUE)
mtext(PE_pheno_name,side = 3, outer=TRUE)
mtext("Genome Score",side = 2, outer=TRUE)
dev.off()
}#end if not NA
}#end for loop
