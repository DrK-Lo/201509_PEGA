colnames(env_clust$carpet)
load("../../20160125 heatmap denograms envi pheno/PineHeatmap.Rdata")
quartz()
par(mfrow=c(22,17))
for (x in 1:22){ ## loop through environments
for (y in 1:17){ ## loop through phenotypes
# get GEA
# get GPA
# make plot2D.a
plot_2D.a(x=results_pine3$Fall_cold_injury_snp_effect,
y=results_pine3$LAT_snp_effect_GCTA,
xlab= "FCI gcta",
ylab= "LAT gcta" ,
nbin=100, xlim=NULL, ylim=NULL,
x_sub=superdf$Fall_cold_injury_snp_effect[num.var.raw.out>0],
y_sub=superdf$LAT_snp_effect_GCTA[num.var.raw.out>0],
PE=-0.42)
}
}
Group1_logical <- results_pine3$gcontig__gcontig_pos %in% Group1_allSuperSNPs$gcontig__gcontig_pos
getwd()
#
#setwd("/Users/katie/Desktop/MINOTAUReval/")
source("distanceFunctionsOther.R")
#source("misc/evalsims/ComparePlot.R")
source("GetAllMultiStats.R")
source("getEmpiricalP2.R")
library(qvalue)
#install.packages("devtools", dependencies=TRUE)
#install.packages("rrcovNA")
library(rrcovNA)
library(devtools)
install_github("NESCent/MINOTAUR@shinyDashboard")
library(MINOTAUR)
d1 <- read.table("~/Google Drive/MultiOutlierVisualization/practiceData/KatieSims/2R_R30_1351142970_988_6_NumPops=30_NumInd=20Bayenv2LFMMpca.Cpval", header=TRUE)
head(d1)
dfv <- d1[c(1,3,4,5,10,12,13,15:17,34)]
dim(dfv)
head(dfv)
#dfv2 <- dfv[dfv$SNPIncluded,]
colnums <- 8:11
#head(dfv)
#str(dfv)
#cbind(colnames(dfv))
table(dfv$s_high)
names(dfv)[colnums]
dfv2.out <- Getdf(dfv, colnums)
dim(dfv)
dim(dfv2.out)
head(dfv2.out)
dfv3.out <- dfv2.out[,-c(12:13, 15, 17, 19)]
head(dfv3.out)
#write.table(dfv3.out, "../data/TwoRefSimForShiny.txt",row.names=FALSE)
head(dfv3.out)
col <- factor(dfv2.out$s_high)
levels(col) = c("grey",  "#9ad0f3", "#0072B2", "#D55E00")
col <- as.character(col)
ind <- c(1:9900/100, 100:199)
cex <- c(rep(0.8, 9900), rep(1.1, 100))
pch <- c(rep(19, 9900), rep(17, 100))
source("GetAllMultiStats.R")
setwd("/Users/katie/Desktop/MINOTAUReval/")
source("distanceFunctionsOther.R")
source("evalsims/distanceFunctionsOther.R")
source("evalsims/Getdf.R")
source("getEmpiricalP2.R")
source("evalsims/getEmpiricalP2.R")
?Mahalanobis
?Mahalanobis2
?harmonicDist
?harmonicDist2
harmonicDist
Mahalanobis
source("evalsims/Getdf.R")
Getdf <- function(dfv, colnums=1:ncol(dfv), S=NULL){
### Check for duplicated rows and abort
if (any(duplicated(dfv))) {
writeLines("Error: Your data frame has duplicated rows")
dfv[duplicated(dfv),]
break()
}
dfv2 <- dfv[,colnums]
rows.keep <- rep(TRUE, nrow(dfv2))
### Remove NAs
if (any(is.na(dfv2))) {
rows.keep <- !is.na(rowSums(dfv2))
dfv2 <- dfv2[rows.keep,]
writeLines(c("Rows with NAs were removed.  The data now has this many rows:", nrow(dfv2)))
}
writeLines("Calculating outlierliness based on FastPCS...")
x<- system.time({
tx <- try(pcs<-FastPCS.out(dfv2))
if("try-error" %in% class(tx)){
pcs <- NA
}
})
print(x)
writeLines("Calculating outlierliness based on clustering (DmWR)...")
x<- system.time({
tx <- try(Hcd <- hclust.ranking(dfv2))
if("try-error" %in% class(tx)){
Hcd <- NA
}
})
print(x)
writeLines("Calculating outlierliness based on Mahalanobis distance...")
x<- system.time({
tx <- try(Md <- Mahalanobis(dfv2, S=S))
if("try-error" %in% class(tx)){
Md <- NA}
})
print(x)
writeLines("Calculating outlierliness based on harmonic mean of euclidean distance correcting for covariances...")
x<- system.time({
tx <- try(Hd_var <- harmonicDist(dfv2,S=S))
if("try-error" %in% class(tx)){
Hd <- NA}
})
print(x)
writeLines("Calculating outlierliness based on kernel density and given bandwith (assume covar)...")
x<- system.time({
bw <- c(seq(0.01,0.1,by=0.01),seq(0.2,1,by=0.1))
#plot(bw, Kd.ML)
tx <- try({
Kd.ML <- kernelDeviance(dfv2, bandwidth = bw, S=S)
bw.best <- bw[which(Kd.ML==min(Kd.ML))[1]]
Kd <- kernelDist(dfv2, bandwidth = bw.best)
})
if("try-error" %in% class(tx)){Kd_var <- NA}
})
print(x)
writeLines("Calculating outlierliness based on euclidean distance to nearest neighbor (cov)...")
x<- system.time({
tx <- try(Nd <- neighborDist(dfv2, S=S))
if("try-error" %in% class(tx)){
Nd <- NA}
})
print(x)
dfv$pcs[rows.keep] <- pcs
dfv$Hcd[rows.keep] <- Hcd
dfv$Md[rows.keep] <- Md
dfv$Hd[rows.keep] <- Hd
dfv$Kd[rows.keep] <- Kd
dfv$Nd[rows.keep] <- Nd
return(dfv)
}
head(d1)
dfv <- d1[c(1,3,4,5,10,12,13,15:17,34)]
dim(dfv)
head(dfv)
#dfv2 <- dfv[dfv$SNPIncluded,]
colnums <- 8:11
#head(dfv)
#str(dfv)
#cbind(colnames(dfv))
table(dfv$s_high)
names(dfv)[colnums]
dfv2.out <- Getdf(dfv, colnums)
Getdf <- function(dfv, colnums=1:ncol(dfv), S=NULL){
### Check for duplicated rows and abort
if (any(duplicated(dfv))) {
writeLines("Error: Your data frame has duplicated rows")
dfv[duplicated(dfv),]
break()
}
dfv2 <- dfv[,colnums]
rows.keep <- rep(TRUE, nrow(dfv2))
### Remove NAs
if (any(is.na(dfv2))) {
rows.keep <- !is.na(rowSums(dfv2))
dfv2 <- dfv2[rows.keep,]
writeLines(c("Rows with NAs were removed.  The data now has this many rows:", nrow(dfv2)))
}
writeLines("Calculating outlierliness based on FastPCS...")
x<- system.time({
tx <- try(pcs<-FastPCS.out(dfv2))
if("try-error" %in% class(tx)){
pcs <- NA
}
})
print(x)
writeLines("Calculating outlierliness based on clustering (DmWR)...")
x<- system.time({
tx <- try(Hcd <- hclust.ranking(dfv2))
if("try-error" %in% class(tx)){
Hcd <- NA
}
})
print(x)
writeLines("Calculating outlierliness based on Mahalanobis distance...")
x<- system.time({
tx <- try(Md <- Mahalanobis(dfv2, S=S))
if("try-error" %in% class(tx)){
Md <- NA}
})
print(x)
writeLines("Calculating outlierliness based on harmonic mean of euclidean distance correcting for covariances...")
x<- system.time({
tx <- try(Hd <- harmonicDist(dfv2,S=S))
if("try-error" %in% class(tx)){
Hd <- NA}
})
print(x)
writeLines("Calculating outlierliness based on kernel density and given bandwith (assume covar)...")
x<- system.time({
bw <- c(seq(0.01,0.1,by=0.01),seq(0.2,1,by=0.1))
#plot(bw, Kd.ML)
tx <- try({
Kd.ML <- kernelDeviance(dfv2, bandwidth = bw, S=S)
bw.best <- bw[which(Kd.ML==min(Kd.ML))[1]]
Kd <- kernelDist(dfv2, bandwidth = bw.best)
})
if("try-error" %in% class(tx)){Kd <- NA}
})
print(x)
writeLines("Calculating outlierliness based on euclidean distance to nearest neighbor (cov)...")
x<- system.time({
tx <- try(Nd <- neighborDist(dfv2, S=S))
if("try-error" %in% class(tx)){
Nd <- NA}
})
print(x)
dfv$pcs[rows.keep] <- pcs
dfv$Hcd[rows.keep] <- Hcd
dfv$Md[rows.keep] <- Md
dfv$Hd[rows.keep] <- Hd
dfv$Kd[rows.keep] <- Kd
dfv$Nd[rows.keep] <- Nd
return(dfv)
}
dfv2.out <- Getdf(dfv, colnums)
head(dfv2.out)
dim(dfv2.out)
dfv3.out <- dfv2.out[,-c(12:13)]
head(dfv3.out)
S_mcd <- CovNAMcd(dfv[,colnums])
S_mcd
Sneut_mcd <- CovNAMcd(dfv[dfv$s_high==0,colnums])
Sneut_mcd
str(S_mcd@cov)
plot(log(Sneut), log(S_mcd@cov)); abline(0,1)
S <- cov(dfv[!is.na(rowSums(dfv[,colnums])),colnums])
S
solve(S)
# Covariance of neutral loci
Sneut <- cov(dfv[dfv$s_high==0,colnums])
Sneut
solve(Sneut)
par(mfrow=c(1,1), mar=c(4,4,1,1))
plot(log(Sneut), log(S)); abline(0,1)
S <- cov(dfv[!is.na(rowSums(dfv[,colnums])),colnums])
S
solve(S)
Sneut <- cov(dfv[dfv$s_high==0,colnums])
Sneut
solve(Sneut)
par(mfrow=c(1,1), mar=c(4,4,1,1))
plot(Sneut, S); abline(0,1)
quartz()
plot(log(Sneut), log(S_mcd@cov)); abline(0,1)
plot(Sneut, S); abline(0,1)
plot(log(abs(Sneut)), log(abs(S)); abline(0,1)
plot(log(abs(Sneut)), log(abs(S))); abline(0,1)
plot(log(abs(Sneut)), log(abs(S_mcd@cov))); abline(0,1)
plot(log(abs(Sneut_mcd@cov)), log(abs(S_mcd@cov))); abline(0,1)
dfv4.out <- Getdf(dfv, colnums, S=S_mcd@cov)
dfv5.out <- dfv4.out[,-12:13]
head(dfv4,out)
head(dfv4.out)
dfv5.out <- dfv4.out[,-c(12:13)]
write.table(dfv5.out, "../data/TwoRefSimForShinyM.txt",row.names=FALSE)
write.table(dfv5.out, "/data/TwoRefSimForShinyM.txt",row.names=FALSE)
write.table(dfv5.out, "data/TwoRefSimForShinyM.txt",row.names=FALSE)
col <- factor(dfv2.out$s_high)
levels(col) = c("grey",  "#9ad0f3", "#0072B2", "#D55E00")
col <- as.character(col)
ind <- c(1:9900/100, 100:199)
cex <- c(rep(0.8, 9900), rep(1.1, 100))
pch <- c(rep(19, 9900), rep(17, 100))
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,3, "A", cex=2)
text(20,3,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, 0, legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,3.1, "B", cex=2)
text(20,3.1,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,6, "C", cex=2)
text(20,6,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,1.5, "D", cex=2)
text(20,1.5,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot(dfv2.out)
quartz()
makeplot(dfv2.out)
makeplot(dfv4.out)
quartz()
makeplot(dfv4.out)
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Md))*0.95, "A", cex=2)
text(20,max(log(dfv2.out$Md))*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, 0, legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Hd))*0.95, "B", cex=2)
text(20,max(log(dfv2.out$Hd))*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Kd))*0.95, "C", cex=2)
text(20,max(log(dfv2.out$Kd))*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Nd))*0.95, "D", cex=2)
text(20,max(log(dfv2.out$Nd))*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot(dfv2.out)
max(log(dfv2.out$Md))*0.95
max(log(dfv2.out$Md), na.rm=TRUE)*0.95
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Md), na.rm=TRUE)*0.95, "A", cex=2)
text(20,max(log(dfv2.out$Md), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, 0, legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95, "B", cex=2)
text(20,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95, "C", cex=2)
text(20,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95, "D", cex=2)
text(20,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot(dfv2.out)
makeplot(dfv4.out)
makeplot(dfv4.out)
quartz()
makeplot(dfv4.out)
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Md), na.rm=TRUE)*0.95, "A", cex=2)
text(20,max(log(dfv2.out$Md), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, mean(log(dfv2.out$Md), na.rm=TRUE)), legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95, "B", cex=2)
text(20,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95, "C", cex=2)
text(20,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95, "D", cex=2)
text(20,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Md), na.rm=TRUE)*0.95, "A", cex=2)
text(20,max(log(dfv2.out$Md), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, mean(log(dfv2.out$Md), na.rm=TRUE)), legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95, "B", cex=2)
text(20,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95, "C", cex=2)
text(20,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95, "D", cex=2)
text(20,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Md), na.rm=TRUE)*0.95, "A", cex=2)
text(20,max(log(dfv2.out$Md), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, mean(log(dfv2.out$Md), na.rm=TRUE), legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95, "B", cex=2)
text(20,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95, "C", cex=2)
text(20,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(0,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95, "D", cex=2)
text(20,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
quartz()
makeplot(dfv4.out)
makeplot <- function(dfv2.out){
par(mfrow=c(2,2), mar=c(3,4,1,1), bty="l")
plot(ind, log(dfv2.out$Md), col=col, pch=pch, ylab= "log(Mahalanobis)", cex=cex)
abline(sort(log(dfv2.out$Md[dfv2.out$s==0]))[9900*0.999],0)
text(5,max(log(dfv2.out$Md), na.rm=TRUE)*0.95, "A", cex=2)
text(30,max(log(dfv2.out$Md), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Md,dfv2.out$s_high==0),2))
legend(125, mean(log(dfv2.out$Md), na.rm=TRUE), legend=c("Neutral", "s = 0.005", "s=0.01", "s=0.1"),
pch=c(19, 17, 17,17), col=c("grey",  "#9ad0f3", "#0072B2", "#D55E00"))
plot(ind, log(dfv2.out$Hd), col=col, pch=pch, ylab= "log(Harmonic mean dist.)", cex=cex)
abline(sort(log(dfv2.out$Hd[dfv2.out$s==0]))[9900*0.999],0)
text(5,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95, "B", cex=2)
text(30,max(log(dfv2.out$Hd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Hd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Kd), col=col, pch=pch, ylab= "log(Kernel density)", cex=cex)
abline(sort(log(dfv2.out$Kd[dfv2.out$s==0]))[9900*0.999],0)
text(5,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95, "C", cex=2)
text(30,max(log(dfv2.out$Kd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Kd,dfv2.out$s_high==0),2))
plot(ind, log(dfv2.out$Nd), col=col, pch=pch, ylab= "log(Nearest neighbor)", cex=cex)
abline(sort(log(dfv2.out$Nd[dfv2.out$s==0]))[9900*0.999],0)
text(5,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95, "D", cex=2)
text(30,max(log(dfv2.out$Nd), na.rm=TRUE)*0.95,round(getEmpPower(dfv2.out$Nd,dfv2.out$s_high==0),2))
}#end funciton
makeplot(dfv2.out)
makeplot(dfv4.out)
colnames(is.superdf) <- names(results_pine3)[cols_raw]
linkage_block <- seq(0,10000, by=10)
bp6_cutter <- 4096
bp8_cutter <- 65536
max.percent.6 <- linkage_block/bp6_cutter
max.percent.6[max.percent.6 > 1] <- 1
max.percent.8 <- linkage_block/bp8_cutter
max.percent.8[max.percent.8 > 1] <- 1
max.percent.8[1:100]
trait <- seq(-1,1,0.1)
trait + rnorm(0,2)
trait + rnorm(length(trait),0,2)
trait <- seq(-1,1,0.01)
trait + rnorm(length(trait),0,2)
trait_fem <- rnorm(100)
trait_mal <- rnorm(100)
trait_kids <- mean(trait_fem, trait_mal) + rnorm(0,2)
trait_kids <- mean(trait_fem, trait_mal) + rnorm(length(trait_fem),0,2)
trait_kids <- (trait_fem + trait_mal)/2 + rnorm(length(trait_fem),0,2)
plot((trait_fem + trait_mal)/2, trait_kinds)
plot((trait_fem + trait_mal)/2, trait_kids)
plot((trait_fem + trait_mal)/2, trait_kids)
par(mfrow=c(2,2))
plot((trait_fem + trait_mal)/2, trait_kids)
par(mfrow=c(1,1))
plot((trait_fem + trait_mal)/2, trait_kids)
lm(trait_kids~(trait_fem + trait_mal)/2)$coef
lm(trait_kids~(trait_fem + trait_mal)/2)
x <- (trait_fem + trait_mal)/2
y <- x + + rnorm(length(trait_fem),0,2)
lm(y~x)
lm(y~x)$coef
lm(y~y+rnorm(length(trait_fem)), 4)$coef
lm(y~y+rnorm(length(trait_fem),0,3))$coef
lm(y~y+rnorm(length(trait_fem),0,4))$coef
lm(y~y+rnorm(length(trait_fem),0,2))$coef
lm(y~(y+rnorm(length(trait_fem),0,2)))$coef
y
lm((y+rnorm(length(trait_fem),0,2))~y)$coef
lm((y+rnorm(length(trait_fem),0,2))~y)$coef
lm((x+rnorm(length(trait_fem),0,2))~x)$coef
lm((x+rnorm(length(trait_fem),0,2))~x)$coef
lm((x+rnorm(length(trait_fem),0,2))~x)$coef
lm((x+rnorm(length(trait_fem),0,2))~x)$coef
lm((x+rnorm(length(trait_fem),0,2))~x)$coef
lm((x+rnorm(length(trait_fem),0,3))~x)$coef
lm((x+rnorm(length(trait_fem),0,3))~x)$coef
lm((x+rnorm(length(trait_fem),0,3))~x)$coef
lm((x+rnorm(length(trait_fem),0,3))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
lm((x+rnorm(length(trait_fem),0,4))~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2)
lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 2); lm(y~x)$coef
y <- x + rnorm(length(trait_fem), 0, 3); lm(y~x)$coef
plot(x/(x+2))
x
median(x/(x+2))
topcan <- as.character(G1_df$contig[G1_df$prop>0.05])
