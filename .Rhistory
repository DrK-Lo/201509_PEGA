image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), binned$nc,
xlab = xlab, ylab = ylab, add = FALSE, col = "heat.colors")
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = "heat.colors")
seq(ylim_lower, ylim_up, length.out = n.bins)
binned$nc
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = "heat.colors")
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE)##col = "heat.colors")
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = "heat.colors")
?image.plot
plot_2D
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins))
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE)
image.plot(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE)
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE)
par(mfrow=c(1,2), mar=c(4,4,4,1))
par(mfrow=c(1,2), mar=c(4,4,4,1), las=1)
n.bins=100
## Plot phenotype
x <- phen_gcta
y <- phen_bayenv
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1), ]
xlim_up <- max(x, na.rm = TRUE)
xlim_lower <- min(x, na.rm = TRUE)
ylim_up <- max(y, na.rm = TRUE)
ylim_lower <- min(y, na.rm = TRUE)
binned <- bin2(data1b, matrix(c(xlim_lower, xlim_up, ylim_lower,
ylim_up), 2, 2, byrow = TRUE), nbin = c(n.bins, n.bins))
binned$nc[binned$nc == 0] = NA
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main=)
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main="")
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "xlab", ylab = "ylab", add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main="")
xlab = "GCTA\n(phenotype~genotype)", ylab = expression(paste("Bayenv",rho)), add = FALSE, col = heat.colors(n.bins),
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "GCTA\n(phenotype~genotype)", ylab = "Bayenv rho\n(genotype ~ phenotype)",
add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main="Fall cold injury")
par(mfrow=c(1,2), mar=c(4,6,4,1), las=1)
n.bins=100
## Plot phenotype
x <- phen_gcta
y <- phen_bayenv
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1), ]
xlim_up <- max(x, na.rm = TRUE)
xlim_lower <- min(x, na.rm = TRUE)
ylim_up <- max(y, na.rm = TRUE)
ylim_lower <- min(y, na.rm = TRUE)
binned <- bin2(data1b, matrix(c(xlim_lower, xlim_up, ylim_lower,
ylim_up), 2, 2, byrow = TRUE), nbin = c(n.bins, n.bins))
binned$nc[binned$nc == 0] = NA
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "GCTA\n(phenotype~genotype)", ylab = "Bayenv rho\n(genotype ~ phenotype)",
add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main="Fall cold injury")
x <- envi_gcta
y <- envi_bayenv
data1 <- cbind(x, y)
warnings()
x <- envi_gcta
y <- envi_bayenv
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1), ]
xlim_up <- max(x, na.rm = TRUE)
xlim_lower <- min(x, na.rm = TRUE)
ylim_up <- max(y, na.rm = TRUE)
ylim_lower <- min(y, na.rm = TRUE)
binned <- bin2(data1b, matrix(c(xlim_lower, xlim_up, ylim_lower,
ylim_up), 2, 2, byrow = TRUE), nbin = c(n.bins, n.bins))
binned$nc[binned$nc == 0] = NA
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "GCTA\n(environment~genotype)", ylab = "Bayenv rho\n(genotype ~ environment)",
add = FALSE, col = heat.colors(n.bins),
legend=FALSE,
main="Mean annual temp.")
x <- rnorm(100)
y <- rnorm(100)
summary(lm(x~y))
summary(lm(y~x))
x <- phen_gcta
y <- phen_bayenv
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1), ]
xlim_up <- max(x, na.rm = TRUE)
xlim_lower <- min(x, na.rm = TRUE)
ylim_up <- max(y, na.rm = TRUE)
ylim_lower <- min(y, na.rm = TRUE)
binned <- bin2(data1b, matrix(c(xlim_lower, xlim_up, ylim_lower,
ylim_up), 2, 2, byrow = TRUE), nbin = c(n.bins, n.bins))
binned$nc[binned$nc == 0] = NA
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "GCTA\n(phenotype~genotype)", ylab = "Bayenv rho\n(genotype ~ phenotype)",
add = FALSE, col = tim.colors(n.bins),
main="Fall cold injury")
### Plot environment
x <- envi_gcta
y <- envi_bayenv
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1), ]
xlim_up <- max(x, na.rm = TRUE)
xlim_lower <- min(x, na.rm = TRUE)
ylim_up <- max(y, na.rm = TRUE)
ylim_lower <- min(y, na.rm = TRUE)
binned <- bin2(data1b, matrix(c(xlim_lower, xlim_up, ylim_lower,
ylim_up), 2, 2, byrow = TRUE), nbin = c(n.bins, n.bins))
binned$nc[binned$nc == 0] = NA
image(seq(xlim_lower, xlim_up, length.out = n.bins),
seq(ylim_lower, ylim_up, length.out = n.bins), z=binned$nc,
xlab = "GCTA\n(environment~genotype)", ylab = "Bayenv rho\n(genotype ~ environment)",
add = FALSE, col = tim.colors(n.bins),
legend=FALSE,
main="Mean annual temp.")
library(rgl)
ff <- read.table ("../data/MAT06-BLUEs&Climate-pine.csv", sep = ",", header = T)
ee <- ff[complete.cases(ff),]
getwd()
setwd("analysis")
ff <- read.table ("../data/MAT06-BLUEs&Climate-pine.csv", sep = ",", header = T)
ee <- ff[complete.cases(ff),]
head(ee)
x<- ee$ColdInjuryFallS02_Mean
y <- ee$TotalWeight
z <- ee$MAT
plot(x, y, xlab="FCI", ylab="Total Weight")
abline(lm(y~x))
plot(z, y, xlab="MAT", ylab="Total Weight")
abline(lm(y~z))
plot(z, x, xlab="MAT", ylab="FCI")
abline(lm(x~z))
lm3 <- lm(x~y*z)
lm4 <- lm (y~x*z)
lm5<- lm (z~x*y)
anova(lm3)
anova(lm4)
anova(lm5)
summary(lm3)
summary(lm4)
summary(lm5)
head(ee)
plot(ee$Latitude, ee$Longitude,col=0, bty="n")
load("../data/large_files/Pine_Alpha_AveRho_WithSuperLogical.RData")
require(ash)
require(fields)
plot_2D.a <- function(x,y, xlab, ylab, xlim=c(-0.3,0.3), ylim=c(-0.3,0.3), nbin, x_sub, y_sub, PE=1){
if(PE<0){x <- -x; x_sub <- -x_sub}
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1),]
if(length(xlim)==0){
xlim_up <- max(x, na.rm=TRUE)+0.15*max(x, na.rm=TRUE)
xlim_lower <- min(x, na.rm=TRUE)-0.15*max(x, na.rm=TRUE)
}else{
xlim_lower <- xlim[1]; xlim_up <- xlim[2]
}
if(length(ylim)==0){
ylim_up <- max(y, na.rm=TRUE)+0.15*max(y, na.rm=TRUE)
ylim_lower <- min(y, na.rm=TRUE)-0.15*max(y, na.rm=TRUE)
}else{
ylim_lower <- ylim[1]; ylim_up <- ylim[2]
}
binned <- bin2(data1b,
matrix(c(xlim_lower,xlim_up,ylim_lower,ylim_up), 2,2, byrow=TRUE),
nbin=c(nbin,nbin))
binned$nc[binned$nc==0]=NA
image(seq(xlim_lower,xlim_up,length.out = nbin),
seq(ylim_lower,ylim_up, length.out=nbin),
binned$nc,
xlab=xlab, ylab=ylab, add=FALSE,
col=grey.colors(75, 0.25,0.9),
xaxt="n", yaxt="n", bty="n")
points(x_sub, y_sub, pch=24, cex=1, col="magenta", bg="orange")
lines(c(-100,100), c(0,0), col="grey") #add x axis
lines(c(0,0), c(-100,100), col="grey") # add y axis
if (abs(PE)>0.1){
abline(lm(y~x), lwd=2)
m <- lm(y_sub~x_sub)
if(summary(m)$coef[2,4] < 1e-01){abline(m, col="orange", lwd=2)}
}
text(xlim_up*0.05, ylim_up*0.95, "+", cex=2, col="grey")
text(xlim_up*0.05, ylim_lower*0.95, "-", cex=2, col="grey")
if(PE>0){
text(xlim_up*0.95,ylim_up*0.05,"+", cex=2, col="grey"); text(xlim_lower*0.95,ylim_up*0.05,"-", cex=2, col="grey")
}
if(PE<0){
text(xlim_up*0.95,ylim_up*0.05,"-", cex=2, col="grey"); text(xlim_lower*0.95,ylim_up*0.05,"+", cex=2, col="grey")
}
text(xlim_up*0.75,ylim_lower*0.95, paste("PE =", PE), cex=1.2)
} # end plot_2D.a
```{r}
plot_2D.b <- function(x,y, xlab, ylab, xlim=c(-0.3,0.3), ylim=c(-0.3,0.3), nbin, x_sub, y_sub, x_sub_green=NULL, y_sub_green=NULL, x_sub_blue=NULL, y_sub_blue=NULL,x_sub_golden=NULL,y_sub_golden=NULL, PE=1){
#if(PE<0){x <- -x; x_sub <- -x_sub}
data1 <- cbind(x, y)
data1b <- data1[complete.cases(data1),]
if(length(xlim)==0){
xlim_up <- max(x, na.rm=TRUE)+0.15*max(x, na.rm=TRUE)
xlim_lower <- min(x, na.rm=TRUE)-0.15*max(x, na.rm=TRUE)
}else{
xlim_lower <- xlim[1]; xlim_up <- xlim[2]
}
if(length(ylim)==0){
ylim_up <- max(y, na.rm=TRUE)+0.15*max(y, na.rm=TRUE)
ylim_lower <- min(y, na.rm=TRUE)-0.15*max(y, na.rm=TRUE)
}else{
ylim_lower <- ylim[1]; ylim_up <- ylim[2]
}
binned <- bin2(data1b,
matrix(c(xlim_lower,xlim_up,ylim_lower,ylim_up), 2,2, byrow=TRUE),
nbin=c(nbin,nbin))
binned$nc[binned$nc==0]=NA
image(seq(xlim_lower,xlim_up,length.out = nbin),
seq(ylim_lower,ylim_up, length.out=nbin),
binned$nc,
xlab=xlab, ylab=ylab, add=FALSE,
col=grey.colors(75, 0.25,0.9),
xaxt="n", yaxt="n", bty="n")
if(PE > 0.1){
polygon(c(0,1,1,0,0), c(0,0,1,1,0),col=rgb(0,0,0,0.1))
polygon(c(0,-1,-1,0,0), c(0,0,-1,-1,0), col=rgb(0,0,0,0.1))
}
if(PE < -0.1){
polygon(c(0,-1,-1,0,0), c(0,0,1,1,0),col=rgb(0,0,0,0.1))
polygon(c(0,1,1,0,0), c(0,0,-1,-1,0),col=rgb(0,0,0,0.1))
}
points(x_sub, y_sub, pch=24, cex=1, col="magenta", bg="orange")
lines(c(-100,100), c(0,0), col="grey") #add x axis
lines(c(0,0), c(-100,100), col="grey") # add y axis
P <- 0.005 # cutoff for linear model significance
if (abs(PE)>0.1){
abline(lm(y~x), lwd=2)
if(length(x_sub)>5){
m <- lm(y_sub~x_sub)
if(summary(m)$coef[2,4] < P){abline(m, col="orange", lwd=2)}
}
}
if(length(x_sub_green)>0){
points(x_sub_green, y_sub_green, pch=24, cex=1, col="darkgreen", bg="green")
if (abs(PE)>0.1 & length(x_sub_green)>5){
m <- lm(y_sub_green~x_sub_green)
if(summary(m)$coef[2,4] < P){abline(m, col="green", lwd=2)}
}
}#end if x_sub_green
if(length(x_sub_blue)>0){
points(x_sub_blue, y_sub_blue, pch=24, cex=1, col="blue", bg="lightblue")
if (abs(PE)>0.1 & length(x_sub_blue)>5){
m <- lm(y_sub_blue~x_sub_blue)
if(summary(m)$coef[2,4] < P){abline(m, col="blue", lwd=2)}
}
}#end if x_sub_blue
if(length(x_sub_golden)>0){
points(x_sub_golden, y_sub_golden, pch=24, cex=1, col="darkgoldenrod4", bg="darkgoldenrod")
if (abs(PE)>0.1 & length(x_sub_golden)>5){
m <- lm(y_sub_golden~x_sub_golden)
if(summary(m)$coef[2,4] < P){abline(m, col="darkgoldenrod", lwd=2)}
}
}#end if x_sub_blue
text(xlim_up*0.05, ylim_up*0.95, "+", cex=2, col="black")
text(xlim_up*0.05, ylim_lower*0.95, "-", cex=2, col="black")
text(xlim_up*0.95,ylim_up*0.05,"+", cex=2, col="black"); text(xlim_lower*0.95,ylim_up*0.05,"-", cex=2, col="black")
text(xlim_up*0.75,ylim_lower*0.95, paste("PE =", PE), cex=1.2)
} # end plot_2D.b
head(PE)
load("../../20160125 heatmap denograms envi pheno/PineHeatmap.Rdata")
# loads env,env_clust,phen,phen_clust,EvP, EvPclust
# env, phen, and EvP are correlation matrices based on raw data
# env_clust and phen_clust are heatmap.2 objects showing how variables were ordered
names(env_clust)
(xorder <- rownames(env_clust$carpet)) # plotted in x axis in this order
colnames(env_clust$carpet) # plotted in y axis in this order
(yorder <- rev(rownames(phen_clust$carpet))) # plotted phenotypes in this order
#yorder <- yorder[-4] # remove root weight
pheno_ind <- c(1:3,5:17)
colnames(phen_clust$carpet) # plotted in y axis in this order
#### Function for plotting according to dendogram order
MakeOutlierPlot <- function(filename, Group_logical, envi_ind=1:22, pheno_ind=c(1:3,5:17), xlim=c(-0.3,0.3), ylim=c(-0.3,0.3),  width=50, height=66, type="Bayenv", Green_logical=NULL, Blue_logical=NULL, Golden_logical=NULL){
#type = "Bayenv" or "Raw"
pdf(file = filename,width=width,height=height)
par(mfrow=c(length(envi_ind),length(pheno_ind)), mar=c(2,2,0,0), oma=c(6,6,6,0))
for (i in envi_ind){ ## loop through environments
for (j in pheno_ind){ ## loop through phenotypes
### y = get GEA column
if(type=="Bayenv"){gea_col <- grep(paste("^",xorder[i],"_rhoave", sep=""),names(results_pine3))}
if(type=="Raw"){gea_col <- grep(paste("^",xorder[i],"_raw_rho", sep=""),names(results_pine3))}
y <- results_pine3[,gea_col] #carrot is needed for FFP
### x = get GPA column
gpa1 <- PE_matchGWAS$Phenotype_GWAS[which(PE_matchGWAS$Abb == yorder[j])]
if(gpa1=="root_wt__shoot_wt_p"){
gpa1 <- "root_wt_shoot_wt_p"}
if(gpa1=="root_wt__shoot_wt_p_1"){
gpa1 <- "root_wt_shoot_wt_p_1"}
if(type=="Bayenv"){
gpa2<- gsub("_p","",gpa1)
gpa_col <- grep(paste("^",gpa2, "_rhoave_BAYENV", sep=""), names(results_pine3))
}
if(type=="Raw"){gpa_col <- grep(paste("^",gpa1,"_raw_rho", sep=""), names(results_pine3))}
x <- results_pine3[,gpa_col]
# pecorr = get PE
pecorr <- PE$pine_correlation[(PE$Environment==PE_matchGEA$Environment_PE[PE_matchGEA$Environment_GEA == xorder[i]]) & PE$PhenAbb==yorder[j]]
# make plot2D.a
plot_2D.b(x,y,
xlab= "", xlim=xlim,
ylab= "" , ylim=ylim,
nbin=100,
x_sub=x[Group_logical],
y_sub=y[Group_logical],
PE=pecorr,
x_sub_green=x[Green_logical],
y_sub_green=y[Green_logical],
x_sub_blue=x[Blue_logical],
y_sub_blue=y[Blue_logical],
x_sub_golden=x[Golden_logical],
y_sub_golden=y[Golden_logical]
)
mtext(xorder[i], side=2)
mtext(yorder[j], side=1)
} #end j loop
print(i)
} #end i loop
dev.off()
}# end function
getInd2 <- function(gtcontig, dataframe){
return(which(dataframe$gtcontig %in% gtcontig))
}
length(gtcontig_array_names)
getOneIndexEach_gtcontig_Cov <- function(array, array_names, value1, value2,  num, logicvect=NULL){
## each index in array is a gtcontig and holds the indexes of SNPs
## that can be sampled, array_names is the gtcontig name
## value1 and value2 are vectors of values with length (nrow(unlist(array))) to calculate the covariance between
## num is the number of gtcontigs to draw from the data
## logicvect is a vector of T/F with length(array_names)
## indicating whether or not to sample that gtcontig
ind <- 1:length(array_names)
## the following code returns the gtcontigs to sample from gtcontig_array
if(length(logicvect)==0){
array_ind <- sample(ind, num, replace=FALSE)
}else{
array_ind <- sample(ind, num, replace=FALSE, prob=logicvect)
}
## the following code returns the row indices in results_pine3 to sample values from
SNProws <- sapply(array_ind, function(i){sample(array[[i]], 1)})
return(cov(value1[SNProws], value2[SNProws]))
}
try1 <- replicate(1000, getOneIndexEach_gtcontig_Cov(gtcontig_array, gtcontig_array_names, results_pine3$LAT_rhoave, results_pine3$Fall_cold_injury_rhoave_BAYENV,  219, logicvect=NULL))
hist(try1*-1)  # negative PE association
superdf <- results_pine3[results_pine3$pine_super_p9 |
results_pine3$pine_super_raw_p9,]
names(results_pine3)[grep("raw_rho", names(results_pine3))]
cols_raw <- grep("raw_rho", names(results_pine3))
is.superdf <- matrix(NA, nrow(superdf), length(cols_raw))
colnames(is.superdf) <- names(results_pine3)[cols_raw]
tail <- 0.999
for (i in 1:length(cols_raw)){
a<- sort(abs(results_pine3[,cols_raw[i]]), na.last = NA)
sorted.index <- round(length(a)*.999)
rho_cutoff <- a[sorted.index]
is.superdf[,i] <- abs(superdf[,cols_raw[i]])>rho_cutoff
print(i)
}
num.var.raw.out <- rowSums(is.superdf,na.rm = TRUE)
nrow(superdf) #total number of SNPs in super contigs
sum(num.var.raw.out>0) # number of super SNPs in super contigs
#number gcontigs represented by all super vs. super SNPs
length(unique(superdf$gtcontig)) # all Sam's super contigs
length(unique(superdf$gtcontig[num.var.raw.out>0])) # super contigs with superSNPs
### Dataframe of Group 1
Group1_allSuperSNPs <- superdf[num.var.raw.out>0,]
dim(Group1_allSuperSNPs)
### Logical Group 1
Group1_logical <- results_pine3$gcontig__gcontig_pos %in% Group1_allSuperSNPs$gcontig__gcontig_pos
### Group 1 array for boostrap covariancepng(file = "GroupEnvByPheno.png",width=50,height=66, unit="in", res=300)
Group1_allSuperSNPs_array_names <- unique(Group1_allSuperSNPs$gtcontig)
Group1_allSuperSNPs_array <- sapply(Group1_allSuperSNPs_array_names, getInd2, Group1_allSuperSNPs)
#snps per contig
G1_df <- data.frame(contig=Group1_allSuperSNPs_array_names,
numOutSnps=as.numeric(sapply(Group1_allSuperSNPs_array, length)))
dim(G1_df)
head(G1_df)
### Top candidates
G1_df <- G1_df[order(G1_df$numOutSnps),]
G1_df[G1_df$numOutSnps>2,]
G1_df$numTotSnps <- sapply(1:nrow(G1_df), function(i){sum(results_pine3$gtcontig==G1_df$contig[i])})
G1_df
G1_df$prop <- G1_df$numOutSnps/G1_df$numTotSnps
G1_df <- G1_df[order(G1_df$prop),]
head(G1_df,50)
tail(G1_df,60)
topcan <- as.character(G1_df$contig[G1_df$prop>0.05])
length(topcan)
## Which ones are super convergent outliers
results_pine3$gtcontig[Group1_logical & results_pine3$pine_super_convergent]
#results_pine3$X_annotation[Group1_logical]
### Annotations on tope genes
for (i in 1:length(topcan)){
print(topcan[i])
numout <- G1_df$numOutSnps[G1_df$contig==topcan[i]]
print(c("Num Outliers:", numout))
print(c("NumSNPs:", sum(results_pine3$gtcontig==topcan[i])))
print(as.character(results_pine3$X_annotation[results_pine3$gtcontig==topcan[i] & Group1_logical]))
} #end for loop
### Contig    	Number outlier SNPs in LAT/DD0
### comp60064_c0_seq1         46
### comp1563_c0_seq1         19
### comp73926_c0_seq1         13
### Contig      Number outlier SNPs in MAP/CMD
#comp1565_c0_seq1         24
#comp2237_c0_seq1          9
#comp9553_c0_seq1          8
colnames(is.superdf)
Group2cols.superdf <- colnames(is.superdf) %in% c(
"LAT_raw_rho",
"DD_0_raw_rho")
### Dataframe of Group 2
Group2_allSuperSNPs <- superdf[rowSums(is.superdf[,Group2cols.superdf],na.rm = TRUE)>0,]
### Logical Group 2
Group2_logical <- results_pine3$gcontig__gcontig_pos %in% Group2_allSuperSNPs$gcontig__gcontig_pos
## Check these two are equal
nrow(Group2_allSuperSNPs)
sum(Group2_logical)
### Group2 array for boostrap covariance
Group2_allSuperSNPs_array_names <- unique(Group2_allSuperSNPs$gtcontig)
Group2_allSuperSNPs_array <- sapply(Group2_allSuperSNPs_array_names, getInd2, Group2_allSuperSNPs)
length(Group2_allSuperSNPs_array)
#snps per contig
Group2_df <- data.frame(contig=Group2_allSuperSNPs_array_names,
numOutSnps=as.numeric(sapply(Group2_allSuperSNPs_array, length)))
xorder
envi_ind=c(2, 5, 6, 9, 10, 11, 12, 13, 17)
xorder[envi_ind]
yorder
pheno_ind=c(1,2,7,16,17)
yorder[pheno_ind]
envi_ind_sm <- c(2,9,10)
xorder[envi_ind_sm]
pheno_ind_sm <- c(1,16)
yorder[pheno_ind_sm]
sum(Group2_logical & results_pine3$gtcontig=="comp60064_c0_seq1")
Group3cols.superdf <- colnames(is.superdf) %in% c("CMD_raw_rho", "MAP_raw_rho")
### Dataframe of Group 3
Group3_allSuperSNPs <- superdf[rowSums(is.superdf[,Group3cols.superdf],na.rm = TRUE)>0,]
### Logical Group 3
Group3_logical <- results_pine3$gcontig__gcontig_pos %in% Group3_allSuperSNPs$gcontig__gcontig_pos
## Check these two are equal
nrow(Group3_allSuperSNPs)
sum(Group3_logical)
### Group3 array for boostrap covariance
Group3_allSuperSNPs_array_names <- unique(Group3_allSuperSNPs$gtcontig)
Group3_allSuperSNPs_array <- sapply(Group3_allSuperSNPs_array_names, getInd2, Group3_allSuperSNPs)
length(Group3_allSuperSNPs_array)
#snps per contig
Group3_df <- data.frame(contig=Group3_allSuperSNPs_array_names,
numOutSnps=as.numeric(sapply(Group3_allSuperSNPs_array, length)))
#34 contigs
MakeOutlierPlot("Group2_vs_Group3_EnvByPhenoBayenv1.pdf", Group2_logical , type="Bayenv", envi_ind = envi_ind, pheno_ind=pheno_ind, width=20, height=24,
Blue_logical=Group3_logical)
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave)
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, nbin=100)
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100)
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group3_logical])
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group2_logical])
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group2_logical],
x_sub_blue = results_pine3$MAT_rhoave[Group3_logical], y_sub_blue=results_pine3$MAP_rhoave[Group3_logical])
head(PE)
head(ff)
cor(ff$MAT, ff$log.MAP.)
cor(ff$MAT, ff$log.MAP., na.rm=TRUE)
cor(ff$MAT, ff$log.MAP., rm.na=TRUE)
cor(ff$MAT, ff$log.MAP.,use = "pairwise.complete.obs")
PE_MAT_MAP = cor(ff$MAT, ff$log.MAP.,use = "pairwise.complete.obs")
par(mar=c(3,3,1,1))
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group2_logical],
x_sub_blue = results_pine3$MAT_rhoave[Group3_logical], y_sub_blue=results_pine3$MAP_rhoave[Group3_logical], PE = PE_MAT_MAP)
```
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group2_logical], x_sub_blue = results_pine3$MAT_rhoave[Group3_logical], y_sub_blue=results_pine3$MAP_rhoave[Group3_logical], PE = round(PE_MAT_MAP,2))
par(mar=c(4,4,1,1))
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, x_sub=results_pine3$MAT_rhoave[Group2_logical], y_sub=results_pine3$MAP_rhoave[Group2_logical], x_sub_blue = results_pine3$MAT_rhoave[Group3_logical], y_sub_blue=results_pine3$MAP_rhoave[Group3_logical], PE = round(PE_MAT_MAP,2))
plot_2D.b(results_pine3$MAT_rhoave, results_pine3$MAP_rhoave, "Mean Annual Temperature", "Mean Annual Precipitation", nbin=100, PE = round(PE_MAT_MAP,2))
